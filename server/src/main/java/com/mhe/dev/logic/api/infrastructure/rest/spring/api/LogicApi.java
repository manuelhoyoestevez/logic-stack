/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mhe.dev.logic.api.infrastructure.rest.spring.api;

import com.mhe.dev.logic.api.infrastructure.rest.spring.dto.DecisionTreeDto;
import com.mhe.dev.logic.api.infrastructure.rest.spring.dto.ErrorDto;
import com.mhe.dev.logic.api.infrastructure.rest.spring.dto.ExpressionDto;
import com.mhe.dev.logic.api.infrastructure.rest.spring.dto.ExpressionTreeDto;
import com.mhe.dev.logic.api.infrastructure.rest.spring.dto.TruthTableDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-12T16:57:08.220+02:00[Europe/Paris]")
@Validated
@Api(value = "logic", description = "the logic API")
public interface LogicApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /logic/expression-to-decision-tree : Convert expression into decision tree
     * Convert expression into decision tree
     *
     * @param body  (required)
     * @param max  (optional, default to false)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Convert expression into decision tree", nickname = "expressionToDecisionTree", notes = "Convert expression into decision tree", response = DecisionTreeDto.class, tags={ "Logic", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DecisionTreeDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class) })
    @PostMapping(
        value = "/logic/expression-to-decision-tree",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DecisionTreeDto> expressionToDecisionTree(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ExpressionDto body,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "max", required = false, defaultValue="false") Boolean max) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mode\" : true, \"truthTable\" : { \"average\" : 0.8008281904610115, \"maxLiteral\" : \"maxLiteral\", \"entropy\" : 6.027456183070403, \"literals\" : [ \"literals\", \"literals\" ], \"values\" : \"0\", \"literalPartition\" : { \"key\" : { \"subtotals\" : { \"key\" : { \"key\" : 7 } }, \"total\" : 5, \"entropy\" : 5.637376656633329, \"totals\" : { \"key\" : 2 }, \"literal\" : \"literal\" } }, \"distribution\" : { \"key\" : 1 }, \"minLiteral\" : \"minLiteral\" }, \"expression\" : \"expression\", \"type\" : \"type\", \"literal\" : \"literal\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /logic/expression-to-truth-table : Convert expression into truth table
     * Convert expression into truth table
     *
     * @param body  (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Convert expression into truth table", nickname = "expressionToTruthTable", notes = "Convert expression into truth table", response = TruthTableDto.class, tags={ "Logic", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = TruthTableDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class) })
    @PostMapping(
        value = "/logic/expression-to-truth-table",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TruthTableDto> expressionToTruthTable(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ExpressionDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"average\" : 0.8008281904610115, \"maxLiteral\" : \"maxLiteral\", \"entropy\" : 6.027456183070403, \"literals\" : [ \"literals\", \"literals\" ], \"values\" : \"0\", \"literalPartition\" : { \"key\" : { \"subtotals\" : { \"key\" : { \"key\" : 7 } }, \"total\" : 5, \"entropy\" : 5.637376656633329, \"totals\" : { \"key\" : 2 }, \"literal\" : \"literal\" } }, \"distribution\" : { \"key\" : 1 }, \"minLiteral\" : \"minLiteral\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /logic/expression : Parse logic expression
     * Parse logic expression into data structure
     *
     * @param body  (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Parse logic expression", nickname = "parseExpression", notes = "Parse logic expression into data structure", response = ExpressionTreeDto.class, tags={ "Logic", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ExpressionTreeDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class) })
    @PostMapping(
        value = "/logic/expression",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ExpressionTreeDto> parseExpression(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ExpressionDto body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expression\" : \"expression\", \"children\" : [ null, null ], \"operator\" : \"and\", \"literal\" : \"literal\", \"order\" : [ \"order\", \"order\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /logic/truth-table-to-decision-tree : Convert truth table into decision tree
     * Convert truth table into decision tree
     *
     * @param body  (required)
     * @param max  (optional, default to false)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     */
    @ApiOperation(value = "Convert truth table into decision tree", nickname = "truthTableToDecisionTree", notes = "Convert truth table into decision tree", response = DecisionTreeDto.class, tags={ "Logic", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DecisionTreeDto.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorDto.class) })
    @PostMapping(
        value = "/logic/truth-table-to-decision-tree",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DecisionTreeDto> truthTableToDecisionTree(@ApiParam(value = "" ,required=true )  @Valid @RequestBody TruthTableDto body,@ApiParam(value = "", defaultValue = "false") @Valid @RequestParam(value = "max", required = false, defaultValue="false") Boolean max) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"mode\" : true, \"truthTable\" : { \"average\" : 0.8008281904610115, \"maxLiteral\" : \"maxLiteral\", \"entropy\" : 6.027456183070403, \"literals\" : [ \"literals\", \"literals\" ], \"values\" : \"0\", \"literalPartition\" : { \"key\" : { \"subtotals\" : { \"key\" : { \"key\" : 7 } }, \"total\" : 5, \"entropy\" : 5.637376656633329, \"totals\" : { \"key\" : 2 }, \"literal\" : \"literal\" } }, \"distribution\" : { \"key\" : 1 }, \"minLiteral\" : \"minLiteral\" }, \"expression\" : \"expression\", \"type\" : \"type\", \"literal\" : \"literal\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
