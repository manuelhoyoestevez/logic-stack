swagger: '2.0'
info:
  version: '@project.version@'
  title: '@project.name@'
schemes:
  - http

paths:
  /system:
    get:
      tags:
        - System
      operationId: getSystemProperties
      summary: Get system properties
      description: Get system properties
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Properties'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'

  /logic/expression:
    post:
      tags:
        - Logic
      operationId: parseExpression
      summary: Parse logic expression
      description: Parse logic expression into data structure
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Expression'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ExpressionTree'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'

  /logic/expression-to-truth-table:
    post:
      tags:
        - Logic
      operationId: expressionToTruthTable
      summary: Convert expression into truth table
      description: Convert expression into truth table
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Expression'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TruthTable'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'

  /logic/truth-table-to-decision-tree:
    post:
      tags:
        - Logic
      operationId: truthTableToDecisionTree
      summary: Convert truth table into decision tree
      description: Convert truth table into decision tree
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: max
          in: query
          required: false
          type: boolean
          default: false
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TruthTable'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DecisionTree'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'

  /logic/expression-to-decision-tree:
    post:
      tags:
        - Logic
      operationId: expressionToDecisionTree
      summary: Convert expression into decision tree
      description: Convert expression into decision tree
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: max
          in: query
          required: false
          type: boolean
          default: false
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Expression'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DecisionTree'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'

definitions:
  Properties:
    type: object

  Expression:
    type: object
    required:
      - expression
    properties:
      expression:
        type: string
        description: expression
        example: "return a -> b;"

  ExpressionTree:
    type: object
    required:
      - operator
    properties:
      expression:
        type: string
        description: Calculated expression after parse
      operator:
        type: string
        enum: [and, or, not, literal]
        description: Logic operator
      literal:
        type: string
        description: Literal if operator is literal
      order:
        type: array
        items:
          type: string
        description: Literals order
        default: []
      children:
        type: array
        items:
          $ref: '#/definitions/ExpressionTree'
        description: Nested ExpressionTree
        default: []

  LiteralDistribution:
    type: object
    properties:
      literal:
        type: string
      total:
        type: integer
      entropy:
        type: number
        format: double
      totals:
        type: object
        additionalProperties:
          type: integer
        description: "Map<Boolean, Integer>"
        default:
          false: 0
          true: 0
      subtotals:
        type: object
        additionalProperties:
          type: object
          additionalProperties:
            type: integer
          description: "Map<Boolean, Integer>"
          default:
            false: 0
            true: 0
        description: "Map<Boolean, Map<Boolean, Integer>>"
        default:
          literal1:
            false: 0
            true: 0
          literal2:
            false: 0
            true: 0

  TruthTable:
    type: object
    properties:
      literals:
        type: array
        items:
          type: string
        description: Literals
        minItems: 0
        default: [ ]
      values:
        type: string
        description: Values
        minLength: 1
        default: 0
      minLiteral:
        type: string
        readOnly: true
      maxLiteral:
        type: string
        readOnly: true
      average:
        type: number
        format: double
        readOnly: true
      entropy:
        type: number
        format: double
        readOnly: true
      distribution:
        type: object
        additionalProperties:
          type: integer
        description:  "Map<Boolean, Integer>"
        default:
          false: 0
          true: 0
      literalPartition:
        type: object # Map<String, LiteralDistribution>
        additionalProperties:
          $ref: '#/definitions/LiteralDistribution'

  DecisionTree:
    type: object
    properties:
      type:
        type: string
      mode:
        type: boolean
      literal:
        type: string
      expression:
        type: string
      truthTable:
        $ref: '#/definitions/TruthTable'
      zero:
        $ref: '#/definitions/DecisionTree'
      one:
        $ref: '#/definitions/DecisionTree'

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: Http error code
        example: 400
      title:
        type: string
        description: Http error message
        example: Bad request
      description:
        type: string
        description: Error description
        example: Wrong user or password provided
